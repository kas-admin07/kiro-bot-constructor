const express = require('express');
const fs = require('fs');
const path = require('path');
const archiver = require('archiver');
const router = express.Router();

// –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ –≤ Python –∫–æ–¥
router.post('/:botId/python', async (req, res) => {
  try {
    const { botId } = req.params;
    const { options = {} } = req.body;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    if (!fs.existsSync(botPath)) {
      return res.status(404).json({
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Python
    const exportResult = exportBotToPython(botData, options);
    
    if (!exportResult.success) {
      return res.status(500).json({
        success: false,
        error: exportResult.error
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const tempDir = path.join(__dirname, '..', 'temp', `export_python_${botId}_${Date.now()}`);
    fs.mkdirSync(tempDir, { recursive: true });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    exportResult.files.forEach(file => {
      const filePath = path.join(tempDir, file.path);
      fs.writeFileSync(filePath, file.content);
    });
    
    // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    const zipPath = path.join(tempDir, `${botData.name || botId}-python.zip`);
    const output = fs.createWriteStream(zipPath);
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    output.on('close', () => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
      res.download(zipPath, `${botData.name || botId}-python.zip`, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞:', err);
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        setTimeout(() => {
          try {
            fs.rmSync(tempDir, { recursive: true, force: true });
          } catch (cleanupError) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', cleanupError);
          }
        }, 5000);
      });
    });
    
    archive.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', err);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞'
      });
    });
    
    archive.pipe(output);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
    exportResult.files.forEach(file => {
      archive.append(file.content, { name: file.path });
    });
    
    archive.finalize();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ –≤ Node.js –∫–æ–¥
router.post('/:botId/nodejs', async (req, res) => {
  try {
    const { botId } = req.params;
    const { options = {} } = req.body;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    if (!fs.existsSync(botPath)) {
      return res.status(404).json({
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ TypeScript)
    const exportResult = exportBotToNodeJS(botData, options);
    
    if (!exportResult.success) {
      return res.status(500).json({
        success: false,
        error: exportResult.error
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const tempDir = path.join(__dirname, '..', 'temp', `export_${botId}_${Date.now()}`);
    fs.mkdirSync(tempDir, { recursive: true });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    exportResult.files.forEach(file => {
      const filePath = path.join(tempDir, file.path);
      fs.writeFileSync(filePath, file.content);
    });
    
    // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    const zipPath = path.join(tempDir, `${botData.name || botId}.zip`);
    const output = fs.createWriteStream(zipPath);
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    output.on('close', () => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
      res.download(zipPath, `${botData.name || botId}.zip`, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞:', err);
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        setTimeout(() => {
          try {
            fs.rmSync(tempDir, { recursive: true, force: true });
          } catch (cleanupError) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', cleanupError);
          }
        }, 5000);
      });
    });
    
    archive.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', err);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞'
      });
    });
    
    archive.pipe(output);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
    exportResult.files.forEach(file => {
      archive.append(file.content, { name: file.path });
    });
    
    archive.finalize();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±–µ–∑ TypeScript –º–æ–¥—É–ª—è)
function exportBotToNodeJS(botSchema, options = {}) {
  const defaultOptions = {
    includeComments: true,
    minify: false,
    platform: 'telegram',
    outputDir: './exported-bot'
  };
  
  const opts = { ...defaultOptions, ...options };
  
  try {
    const files = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    files.push(generateMainFile(botSchema, opts));
    files.push(generatePackageJson(botSchema));
    files.push(generateReadme(botSchema));
    files.push(generateEnvExample());
    files.push(generateConfigFile(botSchema));
    
    return {
      success: true,
      files
    };
  } catch (error) {
    return {
      success: false,
      files: [],
      error: error.message
    };
  }
}

function generateMainFile(botSchema, options) {
  const commandNodes = botSchema.configuration?.nodes?.filter(
    node => node.type === 'trigger-command'
  ) || [];
  
  const commandHandlers = commandNodes.map(node => {
    const command = node.data.command;
    const handlerName = sanitizeHandlerName(command);
    const connectedActions = getConnectedActions(botSchema, node.id);
    
    return `
bot.onText(/${command.replace('/', '\\/')}/,  async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(\`üì® –ö–æ–º–∞–Ω–¥–∞ ${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`);
  
  try {
${connectedActions.map(action => generateActionCode(action)).join('\n')}
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${command}:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
});`;
  }).join('\n');
  
  const mainCode = `${options.includeComments ? generateFileHeader(botSchema) : ''}
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config.json');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
const botVariables = ${JSON.stringify(botSchema.configuration?.variables || {}, null, 2)};

${options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥' : ''}
${commandHandlers}

${options.includeComments ? '// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' : ''}
function updateUserState(userId) {
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      messageCount: 0,
      lastActivity: new Date(),
      variables: new Map()
    });
  }
  
  const state = userStates.get(userId);
  state.messageCount++;
  state.lastActivity = new Date();
}

function replaceVariables(text, userId) {
  let result = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  for (const [key, variable] of Object.entries(botVariables)) {
    const placeholder = \`{{\${key}}}\`;
    result = result.replace(new RegExp(placeholder, 'g'), variable.defaultValue);
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const userState = userStates.get(userId);
  if (userState) {
    result = result.replace(/{{message_count}}/g, userState.messageCount);
    result = result.replace(/{{user_count}}/g, userStates.size);
  }
  
  return result;
}

${options.includeComments ? '// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' : ''}
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', config.name);
console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', config.description);

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

process.on('SIGINT', () => {
  console.log('\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
});
`;

  return {
    path: 'index.js',
    content: mainCode,
    type: 'js'
  };
}

function generateFileHeader(botSchema) {
  return `/**
 * ${botSchema.name}
 * ${botSchema.description}
 * 
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
 * –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
 */

`;
}

function getConnectedActions(botSchema, nodeId) {
  const edges = botSchema.configuration?.edges || [];
  const nodes = botSchema.configuration?.nodes || [];
  
  return edges
    .filter(edge => edge.source === nodeId)
    .map(edge => nodes.find(node => node.id === edge.target))
    .filter(Boolean);
}

function generateActionCode(action) {
  switch (action.type) {
    case 'action-send-message':
      return `    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${action.data.label}
    updateUserState(userId);
    const message = replaceVariables(\`${action.data.text}\`, userId);
    await bot.sendMessage(chatId, message, { 
      parse_mode: '${action.data.parseMode || 'HTML'}' 
    });
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');`;

    default:
      return `    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}
    console.warn('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', '${action.type}');`;
  }
}

function sanitizeHandlerName(command) {
  return command.replace(/[^a-zA-Z0-9]/g, '').replace(/^./, str => str.toUpperCase());
}

function generatePackageJson(botSchema) {
  const packageJson = {
    name: botSchema.id || 'exported-bot',
    version: '1.0.0',
    description: botSchema.description || '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞',
    main: 'index.js',
    scripts: {
      start: 'node index.js',
      dev: 'nodemon index.js'
    },
    dependencies: {
      'node-telegram-bot-api': '^0.61.0'
    },
    devDependencies: {
      nodemon: '^2.0.22'
    },
    keywords: ['telegram', 'bot', 'chatbot'],
    author: 'Bot Constructor',
    license: 'MIT'
  };

  return {
    path: 'package.json',
    content: JSON.stringify(packageJson, null, 2),
    type: 'json'
  };
}

function generateReadme(botSchema) {
  const commands = botSchema.configuration?.nodes
    ?.filter(node => node.type === 'trigger-command')
    ?.map(node => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
    ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

  const readme = `# ${botSchema.name}

${botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
npm install
\`\`\`

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ \`.env.example\` –≤ \`.env\` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:
\`\`\`bash
cp .env.example .env
\`\`\`

### 3. –ó–∞–ø—É—Å–∫
\`\`\`bash
npm start
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞

–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather –≤ Telegram –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª \`.env\`.

–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

  return {
    path: 'README.md',
    content: readme,
    type: 'md'
  };
}

function generateEnvExample() {
  return {
    path: '.env.example',
    content: `# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
TELEGRAM_BOT_TOKEN=your_bot_token_here

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
NODE_ENV=production
`,
    type: 'txt'
  };
}

function generateConfigFile(botSchema) {
  const config = {
    name: botSchema.name,
    description: botSchema.description,
    version: '1.0.0',
    exported: new Date().toISOString(),
    variables: botSchema.configuration?.variables || {}
  };

  return {
    path: 'config.json',
    content: JSON.stringify(config, null, 2),
    type: 'json'
  };
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python
function exportBotToPython(botSchema, options = {}) {
  const defaultOptions = {
    includeComments: true,
    useAsyncio: true,
    framework: 'pyTelegramBotAPI'
  };
  
  const opts = { ...defaultOptions, ...options };
  
  try {
    const files = [];
    
    files.push(generateMainPythonFile(botSchema, opts));
    files.push(generateRequirementsTxt(botSchema));
    files.push(generatePythonReadme(botSchema));
    files.push(generatePythonEnvFile());
    files.push(generatePythonConfig(botSchema));
    files.push(generateRunScript());
    
    return {
      success: true,
      files
    };
  } catch (error) {
    return {
      success: false,
      files: [],
      error: error.message
    };
  }
}

function generateMainPythonFile(botSchema, options) {
  const commandNodes = botSchema.configuration?.nodes?.filter(
    node => node.type === 'trigger-command'
  ) || [];
  
  const commandHandlers = commandNodes.map(node => {
    const command = node.data.command.replace('/', '');
    const connectedActions = getConnectedActions(botSchema, node.id);
    
    return `
@bot.message_handler(commands=['${command}'])
def handle_${command}(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /${command}"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ /${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        update_user_state(user_id)
        
${connectedActions.map(action => generatePythonActionCode(action)).join('\n')}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /${command}: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")`;
  }).join('\n');
  
  const mainCode = `#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
${botSchema.name}
${botSchema.description}

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
"""

import os
import json
import logging
from datetime import datetime
from collections import defaultdict

import telebot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
if not bot_token:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = telebot.TeleBot(bot_token)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = defaultdict(lambda: {'message_count': 0, 'last_activity': datetime.now()})

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
bot_variables = ${JSON.stringify(botSchema.configuration?.variables || {}, null, 4).replace(/"/g, "'")}

start_time = datetime.now()

${commandHandlers}

def update_user_state(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = user_states[user_id]
    state['message_count'] += 1
    state['last_activity'] = datetime.now()

def replace_variables(text, user_id):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ"""
    result = text
    
    for key, variable in bot_variables.items():
        placeholder = f"{{{{{key}}}}}"
        result = result.replace(placeholder, str(variable.get('defaultValue', '')))
    
    state = user_states[user_id]
    result = result.replace('{{message_count}}', str(state['message_count']))
    result = result.replace('{{user_count}}', str(len(user_states)))
    
    uptime = datetime.now() - start_time
    result = result.replace('{{uptime}}', f"{uptime.seconds // 3600} —á–∞—Å–æ–≤")
    
    return result

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}")
    
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        bot.stop_polling()

if __name__ == '__main__':
    main()
`;

  return {
    path: 'main.py',
    content: mainCode,
    type: 'py'
  };
}

function generatePythonActionCode(action) {
  switch (action.type) {
    case 'action-send-message':
      return `        message_text = replace_variables("""${action.data.text}""", user_id)
        bot.send_message(chat_id, message_text, parse_mode='${action.data.parseMode || 'HTML'}')
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")`;

    default:
      return `        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}")`;
  }
}

function generateRequirementsTxt(botSchema) {
  return {
    path: 'requirements.txt',
    content: `pyTelegramBotAPI==4.14.0
python-dotenv==1.0.0
requests==2.31.0
`,
    type: 'txt'
  };
}

function generatePythonReadme(botSchema) {
  const commands = botSchema.configuration?.nodes
    ?.filter(node => node.type === 'trigger-command')
    ?.map(node => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
    ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

  return {
    path: 'README.md',
    content: `# ${botSchema.name}

${botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
pip install -r requirements.txt
\`\`\`

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
\`\`\`bash
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
\`\`\`

### 3. –ó–∞–ø—É—Å–∫
\`\`\`bash
python main.py
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`,
    type: 'md'
  };
}

function generatePythonEnvFile() {
  return {
    path: '.env.example',
    content: `TELEGRAM_BOT_TOKEN=your_bot_token_here
LOG_LEVEL=INFO
`,
    type: 'txt'
  };
}

function generatePythonConfig(botSchema) {
  return {
    path: 'config.json',
    content: JSON.stringify({
      name: botSchema.name,
      description: botSchema.description,
      version: '1.0.0',
      exported: new Date().toISOString()
    }, null, 2),
    type: 'json'
  };
}

function generateRunScript() {
  return {
    path: 'run.bat',
    content: `@echo off
echo ü§ñ –ó–∞–ø—É—Å–∫ Python –±–æ—Ç–∞...
python main.py
pause
`,
    type: 'bat'
  };
}

module.exports = router;