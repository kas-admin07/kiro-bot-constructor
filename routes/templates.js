/**
 * API —Ä–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –±–æ—Ç–æ–≤
 */
const express = require('express');
const router = express.Router();

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è TemplateService (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
class TemplateService {
  async getAllTemplates() {
    return [
      {
        id: 'welcome-bot',
        name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç',
        description: '–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        category: 'business',
        tags: ['–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–Ω–∞—á–∏–Ω–∞—é—â–∏–π'],
        difficulty: 'beginner',
        platforms: ['telegram', 'discord'],
        preview: {
          features: ['–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã', '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞']
        },
        author: 'Bot Constructor Team',
        version: '1.0.0',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      },
      {
        id: 'faq-bot',
        name: 'FAQ –±–æ—Ç',
        description: '–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
        category: 'support',
        tags: ['faq', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
        difficulty: 'intermediate',
        platforms: ['telegram'],
        preview: {
          features: ['–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ FAQ', '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', '–≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º']
        },
        author: 'Bot Constructor Team',
        version: '1.0.0',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ];
  }

  async getTemplate(id) {
    const templates = await this.getAllTemplates();
    return templates.find(t => t.id === id) || null;
  }

  async getTemplatesByCategory(category) {
    const templates = await this.getAllTemplates();
    return templates.filter(t => t.category === category);
  }

  async searchTemplates(query, filters = {}) {
    let templates = await this.getAllTemplates();
    
    if (query) {
      const searchQuery = query.toLowerCase();
      templates = templates.filter(t => 
        t.name.toLowerCase().includes(searchQuery) ||
        t.description.toLowerCase().includes(searchQuery) ||
        t.tags.some(tag => tag.toLowerCase().includes(searchQuery))
      );
    }

    if (filters.category) {
      templates = templates.filter(t => t.category === filters.category);
    }

    if (filters.difficulty) {
      templates = templates.filter(t => t.difficulty === filters.difficulty);
    }

    if (filters.platform) {
      templates = templates.filter(t => t.platforms.includes(filters.platform));
    }

    return templates;
  }

  async getCategories() {
    return [
      {
        id: 'business',
        name: '–ë–∏–∑–Ω–µ—Å',
        description: '–®–∞–±–ª–æ–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
        icon: 'üíº',
        templates: []
      },
      {
        id: 'support',
        name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        description: '–ë–æ—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        icon: 'üéß',
        templates: []
      },
      {
        id: 'education',
        name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        description: '–û–±—É—á–∞—é—â–∏–µ –±–æ—Ç—ã –∏ –∫–≤–∏–∑—ã',
        icon: 'üìö',
        templates: []
      },
      {
        id: 'ecommerce',
        name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è',
        description: '–ë–æ—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤',
        icon: 'üõí',
        templates: []
      }
    ];
  }

  async createBotFromTemplate(templateId, botName) {
    const template = await this.getTemplate(templateId);
    if (!template) return null;

    return {
      id: `bot_${Date.now()}`,
      name: botName,
      nodes: template.schema?.nodes || [],
      edges: template.schema?.edges || [],
      variables: template.schema?.variables || {},
      settings: {
        ...template.schema?.settings,
        name: botName
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
  }
}

const templateService = new TemplateService();

/**
 * GET /api/templates
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
 */
router.get('/', async (req, res) => {
  try {
    const { category, difficulty, platform, search } = req.query;
    
    let templates;
    if (search) {
      templates = await templateService.searchTemplates(search, {
        category,
        difficulty,
        platform
      });
    } else {
      templates = await templateService.getAllTemplates();
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (category) {
        templates = templates.filter(t => t.category === category);
      }
      if (difficulty) {
        templates = templates.filter(t => t.difficulty === difficulty);
      }
      if (platform) {
        templates = templates.filter(t => t.platforms.includes(platform));
      }
    }

    res.json({
      success: true,
      templates,
      total: templates.length
    });
  } catch (error) {
    console.error('Error getting templates:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤'
    });
  }
});

/**
 * GET /api/templates/categories
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
 */
router.get('/categories', async (req, res) => {
  try {
    const categories = await templateService.getCategories();
    
    res.json({
      success: true,
      categories
    });
  } catch (error) {
    console.error('Error getting categories:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
    });
  }
});

/**
 * GET /api/templates/:id
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const template = await templateService.getTemplate(id);
    
    if (!template) {
      return res.status(404).json({
        success: false,
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      template
    });
  } catch (error) {
    console.error('Error getting template:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞'
    });
  }
});

/**
 * POST /api/templates/:id/clone
 * –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
 */
router.post('/:id/clone', async (req, res) => {
  try {
    const { id } = req.params;
    const { name } = req.body;

    if (!name) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      });
    }

    const botSchema = await templateService.createBotFromTemplate(id, name);
    
    if (!botSchema) {
      return res.status(404).json({
        success: false,
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞',
      data: botSchema
    });
  } catch (error) {
    console.error('Error cloning template:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞'
    });
  }
});

module.exports = router;